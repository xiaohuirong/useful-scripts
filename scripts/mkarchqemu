#!/bin/bash

#set -v
show_help() {
	echo "Usage: $0 -o <out dir> -w <work_dir> [-s <img_size>] <profile_dir>"
	echo "  options:"
	echo "  -o <out_dir>              Set the output directory"
	echo "  -w <work_dir>             Set the working directory"
	echo "  -s <img_size>             Set the qemu img size (default 20G)"
    echo "  --swap=SIZE|off           Set swap size or disable swap (off) (default 512M)"
	echo "  -h                        Show this help message"
	echo "  <profile_dir>             Custom profile directory"
    echo -e "\nExample:"
    echo "  mkarchqemu -o ./ -w ./ -s 20G --swap=512M /usr/share/archiso/configs/releng"
}

swap_size=512M
while getopts ":o:w:s:h-:" opt; do
	case $opt in
	o)
		out_dir="$OPTARG"
		;;
	w)
		work_dir="$OPTARG"
		;;
	s)
		img_size="$OPTARG"
		;;
	h)
		show_help
		exit 0
		;;
    -)
        case "$OPTARG" in
            help)
                show_help
                exit 0
                ;;
            swap=*)
                swap_option="${OPTARG#*=}"
                if [ "$swap_option" != "off" ]; then
                  swap_size="$swap_option"
                else
                  swap_size="off"
                fi
                ;;
            *)
                echo "Unvalid option: --$OPTARG" >&2
                show_help
                exit 1
                ;;
        esac
        ;;
	\?)
		echo "Unvalid option: -$OPTARG" >&2
		show_help
		exit 1
		;;
	:)
		echo "-$OPTARG need argument." >&2
		show_help
		exit 1
		;;
	esac
done

shift $((OPTIND - 1))
profile_dir="$1"

if [ -z "$out_dir" ] || [ -z "$work_dir" ] || [ -z "$profile_dir" ]; then
	show_help
    exit
fi

if [ ! -e "$out_dir" ]; then
    echo "Output directory doesn't exist"
    exit 1
elif [ ! -e "$work_dir" ]; then
    echo "Working directory doesn't exist"
    exit 1
elif [ ! -e "$profile_dir" ]; then
    echo "Profile directory doesn't exist"
    exit 1
fi

if [ -z "$img_size" ]; then
	img_size=20G
fi

NEWUSER="arch"
PASSWD="123456"

current_date=$(date +'%Y.%m.%d')
image="$work_dir/image.raw"
qemu_image="$out_dir/archlinux-${current_date}-x86_64.qcow2"
root_mountpoint="$work_dir/arch"
esp_mountpoint="$root_mountpoint/boot"
swap_mountpoint="$root_mountpoint/swap"

function wait_until_settled() {
	udevadm settle
	sudo blockdev --flushbufs --rereadpt "${1}"
	until test -e "${1}p2"; do
		echo "${1}p2 doesn't exist yet..."
		sleep 1
	done
}

handle_error() {
	echo "Something error."
	sudo umount -R $root_mountpoint
	sudo losetup -d $loop
	rm $image
    exit 1
}
trap 'handle_error' ERR

mkdir -p "$root_mountpoint" >/dev/null

truncate -s "$img_size" "$image" >/dev/null

sgdisk --clear \
	--new 1::+1M --typecode=1:ef02 \
	--new 2::+255M --typecode=2:ef00 \
	--new 3::-0 --typecode=3:8304 \
	"$image" >/dev/null

loop=$(sudo losetup --find --partscan --show $image)
wait_until_settled "$loop"

esp=${loop}p2
root=${loop}p3
sudo mkfs.fat -F32 -n ESP $esp
sudo mkfs.btrfs -L ROOT $root -f

sudo mount -o compress=zstd "$root" "$root_mountpoint"
sudo btrfs subvolume create "$root_mountpoint/@"

if [ "$swap_size" != "off" ]; then
    sudo btrfs subvolume create "$root_mountpoint/@swap"
    sudo chattr +C "$root_mountpoint/@swap"
    sudo chmod 0700 "$root_mountpoint/@swap"
    sudo fallocate -l "$swap_size" "$root_mountpoint/@swap/swapfile"
    sudo chmod 0600 "$root_mountpoint/@swap/swapfile"
    sudo mkswap "$root_mountpoint/@swap/swapfile"
fi

sudo umount "$root_mountpoint"
sudo mount -o compress=zstd,subvol=@ $root "$root_mountpoint"

sudo mkdir -p "$esp_mountpoint"
sudo mount $esp "$esp_mountpoint"
if [ "$swap_size" != "off" ]; then
    sudo mkdir -p "$swap_mountpoint"
    sudo mount -o subvol=@swap $root "$swap_mountpoint"
fi

mapfile -t packages < <(sed '/^[[:blank:]]*#.*/d;s/#.*//;/^[[:blank:]]*$/d' "$profile_dir/qemu_packages")
sudo pacstrap -C $profile_dir/pacman.conf $root_mountpoint ${packages[@]}

sudo genfstab -U "$root_mountpoint" >"$work_dir/fstab"
if [ "$swap_size" != "off" ]; then
    sudo sed -i '10,$d' "$work_dir/fstab"
    sudo echo "/swap/swapfile none swap sw 0 0" >>"$work_dir/fstab"
else
    sudo sed -i '6,$d' "$work_dir/fstab"
fi
sudo mv "$work_dir/fstab" "$root_mountpoint/etc"


etc_profile="$profile_dir/airootfs/etc"
sudo rsync -av \
    --exclude="skel" \
    --exclude="motd" \
    --exclude="hostname" \
    --exclude="passwd" \
    --exclude="shadow" \
    --exclude="group" \
    --exclude="gshadow" \
    --exclude="resolv.conf" \
    --exclude="pacman.d/hooks" \
    --exclude="sudoers" \
    --exclude="systemd" \
    --exclude="mkinitcpio.d" \
    --exclude="mkinitcpio.conf.d" \
    --exclude="modprobe.d" \
    --exclude="ssh" \
    --chown=root:root \
    "$etc_profile/" "$root_mountpoint/etc/"

sudo arch-chroot "$root_mountpoint" /bin/bash <<EOL
#set -v

#pacman -Syu --noconfirm
systemctl enable NetworkManager sshd

ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
hwclock --systohc
echo -e 'en_US.UTF-8 UTF-8\nzh_CN.UTF-8 UTF-8' >> /etc/locale.gen
locale-gen

echo LANG=en_US.UTF-8 > /etc/locale.conf
echo archqemu > /etc/hostname

echo -e '127.0.0.1  localhost\n::1  localhost' >> /etc/hosts

chsh -s /usr/bin/zsh
useradd -m -G wheel -s /bin/zsh "${NEWUSER}"
chown "${NEWUSER}:${NEWUSER}" "/home/${NEWUSER}"
echo -e "${PASSWD}\n${PASSWD}" | passwd
echo -e "${PASSWD}\n${PASSWD}" | passwd "${NEWUSER}"
echo "${NEWUSER} ALL=(ALL) NOPASSWD: ALL" > "/etc/sudoers.d/${NEWUSER}"

## Setup grub
grub-install --target=x86_64-efi --recheck --removable --efi-directory=/boot --boot-directory=/boot
grub-install --target=i386-pc --recheck --boot-directory=/boot "${loop}"
echo 'GRUB_THEME="/usr/share/grub/themes/vimix-color-2k/theme.txt"' >> /etc/default/grub

grub-mkconfig -o /boot/grub/grub.cfg

cp -a /boot/{initramfs-linux-fallback.img,initramfs-linux.img}

EOL

home_profile="$profile_dir/airootfs/etc/skel"
root_profile="$profile_dir/airootfs/root"
cp "$home_profile/." "$root_mountpoint/home/$NEWUSER" -r
sudo cp "$root_profile/." "$root_mountpoint/root" -r


sudo umount "$esp_mountpoint"
if [ "$swap_size" != "off" ]; then
    sudo umount "$swap_mountpoint"
fi
sudo umount "$root_mountpoint"
sudo losetup -d $loop
qemu-img convert -f raw -O qcow2 "$image" "$qemu_image"
rm "$image"
rmdir "$root_mountpoint"

ls -lh ${qemu_image} | awk '{print $2}'
echo "----------Successfully built ${qemu_image}-------------------"
