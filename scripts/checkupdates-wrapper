#!/usr/bin/env python3

import subprocess
import re
from rich.console import Console
from rich.table import Table
from rich.text import Text
from rich.box import ROUNDED


def highlight_version_changes(old_ver, new_ver):
    text = Text()
    old_parts = re.split(r"([^a-zA-Z0-9])", old_ver)
    new_parts = re.split(r"([^a-zA-Z0-9])", new_ver)

    for i, (o, n) in enumerate(zip(old_parts, new_parts)):
        if o == n:
            text.append(n)
        else:
            text.append(n, style="bold red")

    if len(new_parts) > len(old_parts):
        for extra in new_parts[len(old_parts) :]:
            text.append(extra, style="bold red")

    return text


def get_updates():
    console = Console()

    try:
        result = subprocess.run(
            ["checkupdates"], capture_output=True, text=True, check=True
        )
        updates = result.stdout.splitlines()

        if not updates:
            console.print("No updates available.", style="bold green")
            return

        table = Table(
            title="Available Updates",
            title_style="bold magenta",
            border_style="bright_blue",
            header_style="bold cyan",
            box=ROUNDED,
            show_header=True,
            pad_edge=False,
            min_width=60,
        )

        table.add_column("Package", style="bold", no_wrap=True)
        table.add_column("Current Version", style="dim")
        table.add_column("New Version", style="bold")

        for line in updates:
            if " -> " not in line:
                continue

            pkg, versions = line.split(maxsplit=1)
            old_ver, new_ver = versions.split(" -> ")

            table.add_row(pkg, old_ver, highlight_version_changes(old_ver, new_ver))

        console.print(table)

    except subprocess.CalledProcessError as e:
        if e.returncode == 2:
            console.print("No updates available.", style="bold green")
        else:
            console.print(f"Error running checkupdates: {e}", style="bold red")
    except Exception as e:
        console.print(f"An unexpected error occurred: {e}", style="bold red")


if __name__ == "__main__":
    get_updates()
